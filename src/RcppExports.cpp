// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Group_Functional_Backwards_Sampling
Rcpp::List Group_Functional_Backwards_Sampling(const arma::mat& ffd1, const arma::mat& Cova, const double m0In, const arma::mat& c0In, const double S0In, const arma::mat& beta0In, const double nt0In, const int flag1, const int NIn, const int NS, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Group_Functional_Backwards_Sampling(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP flag1SEXP, SEXP NInSEXP, SEXP NSSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const double >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const double >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type flag1(flag1SEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Group_Functional_Backwards_Sampling(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, flag1, NIn, NS, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Gruop_FunctionalTestLT
Rcpp::List Gruop_FunctionalTestLT(const arma::mat& ffd1, const arma::mat& Cova, const double m0In, const arma::mat& c0In, const double S0In, const arma::mat& beta0In, const double nt0In, const int flag1, const int NIn, const int NS, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Gruop_FunctionalTestLT(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP flag1SEXP, SEXP NInSEXP, SEXP NSSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const double >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const double >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type flag1(flag1SEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Gruop_FunctionalTestLT(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, flag1, NIn, NS, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Group_FunctionalMultiTest
Rcpp::List Group_FunctionalMultiTest(const arma::mat& ffd1, const arma::mat& Cova, const double m0In, const arma::mat& c0In, const double S0In, const arma::mat& beta0In, const double nt0In, const int flag1, const int NIn, const int NS, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Group_FunctionalMultiTest(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP flag1SEXP, SEXP NInSEXP, SEXP NSSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const double >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const double >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type flag1(flag1SEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Group_FunctionalMultiTest(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, flag1, NIn, NS, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Group_Functional_Equation
Rcpp::List Group_Functional_Equation(const arma::mat& ffd1, const arma::mat& Cova, const double m0In, const arma::mat& c0In, const double S0In, const arma::mat& beta0In, const double nt0In, const int flag1, const int NIn, const int NS, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Group_Functional_Equation(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP flag1SEXP, SEXP NInSEXP, SEXP NSSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const double >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const double >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type flag1(flag1SEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Group_Functional_Equation(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, flag1, NIn, NS, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Individual_Backwards_Sampling
Rcpp::List Individual_Backwards_Sampling(const arma::mat& ffd1, const arma::mat& Cova, const arma::mat& m0In, const arma::mat& c0In, const arma::mat& S0In, const arma::mat& beta0In, const double nt0In, const int NIn, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Individual_Backwards_Sampling(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP NInSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Individual_Backwards_Sampling(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, NIn, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Individual_FunctionalTestLT
Rcpp::List Individual_FunctionalTestLT(const arma::mat& ffd1, const arma::mat& Cova, const arma::mat& m0In, const arma::mat& c0In, const arma::mat& S0In, const arma::mat& beta0In, const double nt0In, const int NIn, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Individual_FunctionalTestLT(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP NInSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Individual_FunctionalTestLT(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, NIn, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Individual_FunctionalMultiTest
Rcpp::List Individual_FunctionalMultiTest(const arma::mat& ffd1, const arma::mat& Cova, const arma::mat& m0In, const arma::mat& c0In, const arma::mat& S0In, const arma::mat& beta0In, const double nt0In, const int NIn, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Individual_FunctionalMultiTest(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP NInSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Individual_FunctionalMultiTest(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, NIn, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}
// Individual_Functional_States
Rcpp::List Individual_Functional_States(const arma::mat& ffd1, const arma::mat& Cova, const arma::mat& m0In, const arma::mat& c0In, const arma::mat& S0In, const arma::mat& beta0In, const double nt0In, const int NIn, const int Nsimu, const int CUTpos);
RcppExport SEXP _BayesDLMfMRI_Individual_Functional_States(SEXP ffd1SEXP, SEXP CovaSEXP, SEXP m0InSEXP, SEXP c0InSEXP, SEXP S0InSEXP, SEXP beta0InSEXP, SEXP nt0InSEXP, SEXP NInSEXP, SEXP NsimuSEXP, SEXP CUTposSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type ffd1(ffd1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Cova(CovaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type m0In(m0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type c0In(c0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S0In(S0InSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta0In(beta0InSEXP);
    Rcpp::traits::input_parameter< const double >::type nt0In(nt0InSEXP);
    Rcpp::traits::input_parameter< const int >::type NIn(NInSEXP);
    Rcpp::traits::input_parameter< const int >::type Nsimu(NsimuSEXP);
    Rcpp::traits::input_parameter< const int >::type CUTpos(CUTposSEXP);
    rcpp_result_gen = Rcpp::wrap(Individual_Functional_States(ffd1, Cova, m0In, c0In, S0In, beta0In, nt0In, NIn, Nsimu, CUTpos));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesDLMfMRI_Group_Functional_Backwards_Sampling", (DL_FUNC) &_BayesDLMfMRI_Group_Functional_Backwards_Sampling, 12},
    {"_BayesDLMfMRI_Gruop_FunctionalTestLT", (DL_FUNC) &_BayesDLMfMRI_Gruop_FunctionalTestLT, 12},
    {"_BayesDLMfMRI_Group_FunctionalMultiTest", (DL_FUNC) &_BayesDLMfMRI_Group_FunctionalMultiTest, 12},
    {"_BayesDLMfMRI_Group_Functional_Equation", (DL_FUNC) &_BayesDLMfMRI_Group_Functional_Equation, 12},
    {"_BayesDLMfMRI_Individual_Backwards_Sampling", (DL_FUNC) &_BayesDLMfMRI_Individual_Backwards_Sampling, 10},
    {"_BayesDLMfMRI_Individual_FunctionalTestLT", (DL_FUNC) &_BayesDLMfMRI_Individual_FunctionalTestLT, 10},
    {"_BayesDLMfMRI_Individual_FunctionalMultiTest", (DL_FUNC) &_BayesDLMfMRI_Individual_FunctionalMultiTest, 10},
    {"_BayesDLMfMRI_Individual_Functional_States", (DL_FUNC) &_BayesDLMfMRI_Individual_Functional_States, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesDLMfMRI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
